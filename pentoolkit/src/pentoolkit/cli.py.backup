# pentoolkit/src/pentoolkit/cli.py - Minimal Working Version
import typer
import os
import yaml
from datetime import datetime
from pathlib import Path
from typing import Optional
from rich.console import Console
from rich.table import Table
from rich.prompt import Confirm
from rich.panel import Panel
import http.server
import socketserver
import webbrowser

# Import your existing modules
from pentoolkit import main
from pentoolkit.utils import report
from pentoolkit.utils.config import get_config

console = Console()

# Main app
app = typer.Typer(
    help="Pentoolkit - Penetration Testing Automation Suite",
    no_args_is_help=True
)

# Command groups
scan_app = typer.Typer(help="Run security scans")
results_app = typer.Typer(help="Manage scan results") 
config_app = typer.Typer(help="Configuration management")

app.add_typer(scan_app, name="scan")
app.add_typer(results_app, name="results")
app.add_typer(config_app, name="config")

# ==================== SCAN COMMANDS ====================

@scan_app.command("run")
def run_scan(
    target: str = typer.Argument(..., help="Target hostname or IP"),
    modules: str = typer.Option("all", "--modules", "-m", help="Modules: nmap,ssl,whois,waf,web_recon"),
    scan_type: str = typer.Option("default", "--scan-type", "-s", help="Nmap scan type"),
    ports: str = typer.Option(None, "--ports", "-p", help="Port range (e.g., 1-1000)"),
    scripts: str = typer.Option(None, "--scripts", help="NSE scripts"),
    timing: int = typer.Option(None, "--timing", "-T", help="Timing template (0-5)"),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Verbose output")
):
    """Run comprehensive security scans"""
    console.print(f"[cyan]Starting scan on: {target}[/cyan]")
    
    # Show configuration
    console.print(Panel.fit(
        f"Target: {target}\n"
        f"Modules: {modules}\n" 
        f"Scan Type: {scan_type}\n"
        f"Ports: {ports or 'default'}\n"
        f"Scripts: {scripts or 'default'}\n"
        f"Timing: {timing or 'default'}",
        title="Scan Configuration"
    ))
    
    if not Confirm.ask("Proceed with scan?"):
        console.print("[yellow]Scan cancelled[/yellow]")
        return
    
    # Build nmap arguments
    extra_args = []
    if ports:
        extra_args.append(f"-p {ports}")
    if scripts:
        extra_args.append(f"--script {scripts}")
    if timing is not None:
        extra_args.append(f"-T{timing}")
    
    nmap_args = " ".join(extra_args)
    
    try:
        console.print("[cyan]Running scans...[/cyan]")
        results = main.run_scan(target, modules, scan_type=scan_type, extra_args=nmap_args)
        
        # Show summary
        console.print("\n[green]Scan completed![/green]")
        if results:
            table = Table(title="Results Summary")
            table.add_column("Module")
            table.add_column("Status")
            table.add_column("Details")
            
            for module, result in results.items():
                if result:
                    status = "[green]Success[/green]"
                    if module == "nmap" and isinstance(result, list):
                        details = f"{len(result)} open ports"
                    else:
                        details = "Completed"
                else:
                    status = "[red]Failed[/red]"
                    details = "No results"
                
                table.add_row(module.upper(), status, details)
            
            console.print(table)
        
        # Auto-generate summary report
        console.print("[cyan]Generating summary report...[/cyan]")
        try:
            summary_data, html_path = report.aggregate_target_reports(target)
            if html_path:
                console.print(f"[green]Summary report: {html_path}[/green]")
        except Exception as e:
            console.print(f"[yellow]Report generation failed: {e}[/yellow]")
            
    except KeyboardInterrupt:
        console.print("\n[yellow]Scan interrupted by user[/yellow]")
    except Exception as e:
        console.print(f"[red]Scan failed: {e}[/red]")

@scan_app.command("quick")
def quick_scan(target: str = typer.Argument(..., help="Target to scan")):
    """Quick scan with default settings"""
    console.print(f"[cyan]Quick scan: {target}[/cyan]")
    
    try:
        results = main.run_scan(target, "nmap,ssl")
        console.print("[green]Quick scan completed![/green]")
        
        if results and results.get("nmap"):
            ports = results["nmap"]
            if isinstance(ports, list):
                console.print(f"Found {len(ports)} open ports")
                for port in ports[:5]:  # Show first 5
                    console.print(f"  {port.get('port')}/{port.get('protocol')} - {port.get('service')}")
                if len(ports) > 5:
                    console.print(f"  ... and {len(ports) - 5} more")
    except Exception as e:
        console.print(f"[red]Quick scan failed: {e}[/red]")

# ==================== RESULTS COMMANDS ====================

@results_app.command("list")
def list_reports():
    """List all saved reports"""
    reports = report.list_reports()
    
    if not reports:
        console.print("[yellow]No reports found[/yellow]")
        return
    
    console.print(f"[green]Found {len(reports)} reports:[/green]")
    
    # Group by target
    targets = {}
    for report_file in reports:
        parts = report_file.split('_')
        if len(parts) >= 2:
            target = parts[0]
            if target not in targets:
                targets[target] = []
            targets[target].append(report_file)
    
    table = Table(title="Available Reports")
    table.add_column("Target")
    table.add_column("Reports")
    table.add_column("Count")
    
    for target, target_reports in targets.items():
        modules = set()
        for rep in target_reports:
            parts = rep.split('_')
            if len(parts) >= 2:
                modules.add(parts[1])
        
        table.add_row(
            target,
            ", ".join(sorted(modules)),
            str(len(target_reports))
        )
    
    console.print(table)

@results_app.command("show")
def show_report(target: str = typer.Argument(..., help="Target name")):
    """Show reports for a specific target"""
    target_reports = report.find_target_reports(target)
    
    if not target_reports:
        console.print(f"[yellow]No reports found for: {target}[/yellow]")
        return
    
    console.print(f"[green]Reports for {target}:[/green]")
    for report_file in target_reports:
        console.print(f"  • {report_file}")
    
    # Try to show summary if available
    try:
        summary_data, html_path = report.aggregate_target_reports(target)
        if html_path:
            console.print(f"\n[cyan]Summary report available: {html_path}[/cyan]")
    except Exception as e:
        console.print(f"[yellow]Could not generate summary: {e}[/yellow]")

@results_app.command("summary")
def create_summary(target: str = typer.Argument(..., help="Target name")):
    """Generate aggregated summary report for target"""
    console.print(f"[cyan]Creating summary for: {target}[/cyan]")
    
    try:
        summary_data, html_path = report.aggregate_target_reports(target)
        if html_path:
            console.print(f"[green]Summary created: {html_path}[/green]")
        else:
            console.print("[yellow]No data found to summarize[/yellow]")
    except Exception as e:
        console.print(f"[red]Summary creation failed: {e}[/red]")

@results_app.command("serve")
def serve_reports(port: int = typer.Option(8080, help="Port number")):
    """Serve reports via HTTP"""
    report_dir = "./reports"
    
    if not os.path.exists(report_dir):
        console.print(f"[red]Reports directory not found: {report_dir}[/red]")
        return
    
    console.print(f"[green]Starting server on port {port}[/green]")
    console.print(f"[cyan]Access reports at: http://localhost:{port}/[/cyan]")
    
    os.chdir(report_dir)
    Handler = http.server.SimpleHTTPRequestHandler
    
    try:
        with socketserver.TCPServer(("", port), Handler) as httpd:
            webbrowser.open(f"http://localhost:{port}/")
            httpd.serve_forever()
    except KeyboardInterrupt:
        console.print("\n[yellow]Server stopped[/yellow]")

# ==================== CONFIG COMMANDS ====================

@config_app.command("show")
def show_config(section: str = typer.Option(None, help="Show specific section")):
    """Show current configuration"""
    config = get_config()
    
    console.print(Panel.fit(
        f"Config File: {config.config_path}\n"
        f"Exists: {'Yes' if config.config_path.exists() else 'No'}\n"
        f"Sections: {len(config._config_data)}",
        title="Configuration Status"
    ))
    
    if section:
        section_data = config.get_section(section)
        if section_data:
            console.print(f"\n[{section}] Configuration:")
            console.print(yaml.dump({section: section_data}, default_flow_style=False))
        else:
            console.print(f"[red]Section '{section}' not found[/red]")
            if config._config_data:
                console.print(f"Available: {', '.join(config._config_data.keys())}")
    else:
        if config._config_data:
            console.print("\nAvailable sections:")
            for name in config._config_data.keys():
                console.print(f"  • {name}")
        else:
            console.print("[yellow]No config file found - using defaults[/yellow]")

@config_app.command("create")
def create_config(force: bool = typer.Option(False, "--force", help="Overwrite existing")):
    """Create default configuration file"""
    config_path = Path("/home/admin-1/Desktop/tools/new-toolkit/pentoolkit/src/pentoolkit/config.yaml")
    
    if config_path.exists() and not force:
        console.print(f"[yellow]Config exists: {config_path}[/yellow]")
        if not Confirm.ask("Overwrite?"):
            return
    
    # Create basic config
    default_config = {
        'global': {
            'default_timeout': 30,
            'default_threads': 40,
        },
        'nmap': {
            'default_args': '-sV',
            'timeout': 300,
        },
        'ssl': {
            'default_port': 443,
            'timeout': 15,
        },
        'web_recon': {
            'wordlists': [
                '/usr/share/wordlists/dirb/common.txt',
                '/home/admin-1/Desktop/common.txt',
                './wordlists/common.txt'
            ],
            'default_extensions': 'php,html,htm,asp,aspx,jsp',
        },
        'security': {
            'allowed_networks': [
                '10.0.0.0/8',
                '172.16.0.0/12',
                '192.168.0.0/16',
                '127.0.0.0/8',
                '0.0.0.0/0'
            ]
        }
    }
    
    try:
        with open(config_path, 'w') as f:
            yaml.dump(default_config, f, default_flow_style=False)
        console.print(f"[green]Config created: {config_path}[/green]")
    except Exception as e:
        console.print(f"[red]Failed to create config: {e}[/red]")

@config_app.command("test")
def test_config():
    """Test configuration and dependencies"""
    config = get_config()
    
    console.print("[cyan]Testing configuration...[/cyan]")
    
    issues = []
    
    # Test wordlists
    web_config = config.web_recon_config
    found_wordlist = config.find_wordlist(web_config.wordlists)
    if found_wordlist:
        console.print(f"[green]✓ Wordlist found: {found_wordlist}[/green]")
    else:
        issues.append("No wordlists accessible")
        console.print("[red]✗ No wordlists found[/red]")
    
    # Test timeouts
    if config.global_config.default_timeout > 0:
        console.print(f"[green]✓ Timeout: {config.global_config.default_timeout}s[/green]")
    else:
        issues.append("Invalid timeout setting")
    
    # Test report directory
    report_dir = Path("./reports")
    if report_dir.exists() or report_dir.parent.exists():
        console.print(f"[green]✓ Reports dir: {report_dir}[/green]")
    else:
        issues.append("Cannot access reports directory")
    
    # Summary
    if issues:
        console.print(f"\n[red]Found {len(issues)} issues:[/red]")
        for issue in issues:
            console.print(f"  • {issue}")
    else:
        console.print("\n[green]Configuration test passed![/green]")

@config_app.command("path")
def show_config_path():
    """Show config file path"""
    config = get_config()
    console.print(f"Config file: {config.config_path}")
    console.print(f"Exists: {config.config_path.exists()}")
    
    if not config.config_path.exists():
        console.print("[cyan]Run 'pentoolkit config create' to create one[/cyan]")

# ==================== MAIN ====================

def main():
    app()

if __name__ == "__main__":
    main()